{"uid":"e2e3c1cbe759f6f4","name":"test_registration_different_password","fullName":"Sprint_1.POM.Registration.test_registration_negative_password.TestTC#test_registration_different_password","historyId":"726f019de41d28c734ef2d913a74bdcb","time":{"start":1750660332832,"stop":1750660334234,"duration":1402},"status":"broken","statusMessage":"selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <input _ngcontent-mqw-c112=\"\" matinput=\"\" placeholder=\"example@example.com\" formcontrolname=\"email\" required=\"\" class=\"mat-input-element mat-form-field-autofill-control ng-tns-c51-1 cdk-text-field-autofill-monitored ng-dirty ng-valid ng-touched\" id=\"mat-input-0\" data-placeholder=\"example@example.com\" aria-required=\"true\" aria-invalid=\"false\"> is not clickable at point (380, 5). Other element would receive the click: <mat-toolbar-row class=\"mat-toolbar-row\">...</mat-toolbar-row>\n  (Session info: chrome=137.0.7151.103)\nStacktrace:\n#0 0x560bb1a34c9a <unknown>\n#1 0x560bb14da6e0 <unknown>\n#2 0x560bb1532f8c <unknown>\n#3 0x560bb1530e1d <unknown>\n#4 0x560bb152e492 <unknown>\n#5 0x560bb152dbb0 <unknown>\n#6 0x560bb15202fd <unknown>\n#7 0x560bb1551e32 <unknown>\n#8 0x560bb151fc7a <unknown>\n#9 0x560bb1551ffe <unknown>\n#10 0x560bb15782cc <unknown>\n#11 0x560bb1551c03 <unknown>\n#12 0x560bb151e47b <unknown>\n#13 0x560bb151f0e1 <unknown>\n#14 0x560bb19f944b <unknown>\n#15 0x560bb19fd37f <unknown>\n#16 0x560bb19e0f89 <unknown>\n#17 0x560bb19fdf18 <unknown>\n#18 0x560bb19c56df <unknown>\n#19 0x560bb1a22308 <unknown>\n#20 0x560bb1a224e6 <unknown>\n#21 0x560bb1a33b76 <unknown>\n#22 0x7fc6d209caa4 <unknown>\n#23 0x7fc6d2129c3c <unknown>","statusTrace":"self = <test_registration_negative_password.TestTC object at 0x7f8ead380730>\n\n    def test_registration_different_password(self):\n        self.pageRegistration.input_reg_email().send_keys(self.e_mail)\n        self.pageRegistration.input_reg_user().send_keys(self.username)\n        self.pageRegistration.input_password_first().send_keys('Password_1')\n        self.pageRegistration.input_password_again().send_keys('Password_2')\n>       self.pageRegistration.input_reg_email().click()\n\nSprint_1/POM/Registration/test_registration_negative_password.py:53: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/opt/hostedtoolcache/Python/3.10.18/x64/lib/python3.10/site-packages/selenium/webdriver/remote/webelement.py:121: in click\n    self._execute(Command.CLICK_ELEMENT)\n/opt/hostedtoolcache/Python/3.10.18/x64/lib/python3.10/site-packages/selenium/webdriver/remote/webelement.py:574: in _execute\n    return self._parent.execute(command, params)\n/opt/hostedtoolcache/Python/3.10.18/x64/lib/python3.10/site-packages/selenium/webdriver/remote/webdriver.py:447: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7f8eac9662f0>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element click intercepted\",\"message\":\"element click intercepted: Element ...\\\\n#21 0x560bb1a33b76 \\\\u003Cunknown>\\\\n#22 0x7fc6d209caa4 \\\\u003Cunknown>\\\\n#23 0x7fc6d2129c3c \\\\u003Cunknown>\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <input _ngcontent-mqw-c112=\"\" matinput=\"\" placeholder=\"example@example.com\" formcontrolname=\"email\" required=\"\" class=\"mat-input-element mat-form-field-autofill-control ng-tns-c51-1 cdk-text-field-autofill-monitored ng-dirty ng-valid ng-touched\" id=\"mat-input-0\" data-placeholder=\"example@example.com\" aria-required=\"true\" aria-invalid=\"false\"> is not clickable at point (380, 5). Other element would receive the click: <mat-toolbar-row class=\"mat-toolbar-row\">...</mat-toolbar-row>\nE         (Session info: chrome=137.0.7151.103)\nE       Stacktrace:\nE       #0 0x560bb1a34c9a <unknown>\nE       #1 0x560bb14da6e0 <unknown>\nE       #2 0x560bb1532f8c <unknown>\nE       #3 0x560bb1530e1d <unknown>\nE       #4 0x560bb152e492 <unknown>\nE       #5 0x560bb152dbb0 <unknown>\nE       #6 0x560bb15202fd <unknown>\nE       #7 0x560bb1551e32 <unknown>\nE       #8 0x560bb151fc7a <unknown>\nE       #9 0x560bb1551ffe <unknown>\nE       #10 0x560bb15782cc <unknown>\nE       #11 0x560bb1551c03 <unknown>\nE       #12 0x560bb151e47b <unknown>\nE       #13 0x560bb151f0e1 <unknown>\nE       #14 0x560bb19f944b <unknown>\nE       #15 0x560bb19fd37f <unknown>\nE       #16 0x560bb19e0f89 <unknown>\nE       #17 0x560bb19fdf18 <unknown>\nE       #18 0x560bb19c56df <unknown>\nE       #19 0x560bb1a22308 <unknown>\nE       #20 0x560bb1a224e6 <unknown>\nE       #21 0x560bb1a33b76 <unknown>\nE       #22 0x7fc6d209caa4 <unknown>\nE       #23 0x7fc6d2129c3c <unknown>\n\n/opt/hostedtoolcache/Python/3.10.18/x64/lib/python3.10/site-packages/selenium/webdriver/remote/errorhandler.py:232: ElementClickInterceptedException","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"_xunit_setup_method_fixture_TestTC","time":{"start":1750660332147,"stop":1750660332832,"duration":685},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"afterStages":[{"name":"_xunit_setup_method_fixture_TestTC::0","time":{"start":1750660334260,"stop":1750660334321,"duration":61},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"parentSuite","value":"Sprint_1.POM.Registration"},{"name":"suite","value":"test_registration_negative_password"},{"name":"subSuite","value":"TestTC"},{"name":"host","value":"fv-az798-750"},{"name":"thread","value":"3296-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"Sprint_1.POM.Registration.test_registration_negative_password"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"tags":[]},"source":"e2e3c1cbe759f6f4.json","parameterValues":[]}